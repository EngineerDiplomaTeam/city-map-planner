// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$primary: mat.define-palette(mat.$lime-palette);
$accent: mat.define-palette(mat.$green-palette);
$warn: mat.define-palette(mat.$orange-palette, 500);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$dark-theme: mat.define-dark-theme((
  color: (
    primary: $primary,
    accent: $accent,
    warn: $warn,
  ),
));

$light-theme: mat.define-light-theme((
  color: (
    primary: $primary,
    accent: $accent,
    warn: $warn,
  ),
));

// Apply the light theme by default
@include mat.core-theme($light-theme);
@include mat.toolbar-theme($light-theme);
@include mat.icon-theme($light-theme);
@include mat.button-theme($light-theme);
@include mat.list-theme($light-theme);
@include mat.card-theme($light-theme);
@include mat.dialog-theme($light-theme);
@include mat.input-theme($light-theme);
@include mat.form-field-theme($light-theme);
@include mat.progress-bar-theme($light-theme);
@include mat.snack-bar-theme($light-theme);
@include mat.bottom-sheet-theme($light-theme);
@include mat.fab-theme($light-theme);
@include mat.badge-theme($light-theme);
@include mat.divider-theme($light-theme);
@include mat.datepicker-theme($light-theme);
@include mat.select-theme($light-theme);
@include mat.menu-theme($light-theme);
@include mat.toolbar-theme($light-theme);
@include mat.progress-spinner-theme($light-theme);

// Apply the dark theme only when the user prefers dark themes.
@media (prefers-color-scheme: dark) {
  // Use the `-color` mixins to only apply color styles without reapplying the same
  // typography and density styles.
  @include mat.core-color($dark-theme);
  @include mat.toolbar-color($dark-theme);
  @include mat.icon-color($dark-theme);
  @include mat.button-color($dark-theme);
  @include mat.list-color($dark-theme);
  @include mat.card-color($dark-theme);
  @include mat.dialog-color($dark-theme);
  @include mat.input-color($dark-theme);
  @include mat.form-field-color($dark-theme);
  @include mat.progress-bar-color($dark-theme);
  @include mat.snack-bar-color($dark-theme);
  @include mat.bottom-sheet-color($dark-theme);
  @include mat.fab-color($dark-theme);
  @include mat.badge-color($dark-theme);
  @include mat.divider-color($dark-theme);
  @include mat.datepicker-color($dark-theme);
  @include mat.select-color($dark-theme);
  @include mat.menu-color($dark-theme);
  @include mat.toolbar-color($dark-theme);
  @include mat.progress-spinner-color($dark-theme);
}

/* You can add global styles to this file, and also import other style files */
:root {
  // Why Angular why? FIXME: Remove these variables, yet without breaking app
  --mat-badge-text-font: Roboto, sans-serif;
  --mat-badge-text-size: 0.688rem;
  --mat-badge-small-size-text-size: 0.688rem;
  --mat-badge-text-weight: 500;
}

html, body {
  height: 100%;
  color-scheme: light dark;
}

body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}

app-root {
  display: flex;
  flex-direction: column;
  height: 100svh;
}

a {
  color: mat.get-color-from-palette($primary, 500);

  &:hover {
    text-decoration: underline;
    cursor: pointer;
  }
}

.error-snackbar {
  white-space: pre-wrap;
  .mdc-snackbar__surface{
    --mdc-snackbar-container-color: #{mat.get-color-from-palette($warn, 900)};
    --mdc-snackbar-supporting-text-color: #{mat.get-color-from-palette($warn, A900)};
  }
}

.warn {
  background: mat.get-color-from-palette($warn, 900);
}
