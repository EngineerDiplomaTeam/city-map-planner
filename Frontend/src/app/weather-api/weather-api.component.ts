import { ChangeDetectionStrategy, Component, inject } from '@angular/core';import { WeatherIconsService } from '../weather-icons/weather-icons-service';import { WeatherApiService } from './weather-api.service';import { AsyncPipe, JsonPipe, NgForOf, NgIf } from '@angular/common';import { WeatherStatus } from './WeatherStatus';import { map, Observable } from 'rxjs';@Component({  selector: 'app-weather-api',  standalone: true,  imports: [AsyncPipe, JsonPipe, NgForOf, NgIf],  templateUrl: './weather-api.component.html',  styleUrl: './weather-api.component.scss',  changeDetection: ChangeDetectionStrategy.OnPush,})export class WeatherApiComponent {  private readonly weatherApiService = inject(WeatherApiService);  protected readonly weatherIconService = inject(WeatherIconsService);  protected weather = this.weatherApiService.listWeather();  protected now = new Date();  protected currentWeather$: Observable<WeatherStatus | null> =    this.weatherApiService      .listWeather()      .pipe(        map((statuses: WeatherStatus[]) =>          this.weatherIconService.findClosestWeather(statuses, this.now),        ),      );}